"use server";

import { HttpSession } from "@/types/session";
import { http } from "@/lib/http";
import { Session } from "next-auth";

type GetLovedSongsResponse = {
  total: number;
};

type GetLovedSongs = (session: Session) => Promise<GetLovedSongsResponse>;

export const getLovedSongs: GetLovedSongs = async (session) => {
  return await http.get<GetLovedSongsResponse>(
    `https://api.spotify.com/v1/me/tracks`,
    session as HttpSession,
  );
};

type GetUserResponse = {
  id: string;
};

type GetUser = (session: Session) => Promise<GetUserResponse>;

const getUser: GetUser = async (session) => {
  return await http.get<GetUserResponse>(
    `https://api.spotify.com/v1/me`,
    session as HttpSession,
  );
};

type CreatePlaylist = (session: Session) => Promise<void>;

export const createPlaylist: CreatePlaylist = async (session) => {
  const { id } = await getUser(session);

  return await http.post(
    `https://api.spotify.com/v1/users/${id}/playlists`,
    session as HttpSession,
    {
      name: `CLS - Loved Songs (${Intl.DateTimeFormat("fr-FR").format(new Date())})`,
      description: "A playlist generated by the CLS app.",
    },
  );
};
